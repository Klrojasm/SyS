{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMFlvKdWRDkP5VFQTcnnusx",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Klrojasm/SyS/blob/main/parcial\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "ejercicio 2.1 del primer parcial 2023\n"
      ],
      "metadata": {
        "id": "MszMErfiD704"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import sympy as  sym\n",
        "from sympy import integrate, init_printing\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "t = sym.symbols('t', real = True)\n",
        "T = 4*np.pi\n",
        "w, B = sym.symbols('w, B', real = True, nonzero = True, nonnegative = True)\n",
        "T0 = 2*sym.pi/w\n",
        "x = B*sym.sin(w*T0)\n",
        "x1 = sym.Heaviside(t),(0,T/4)\n",
        "x2 = sym.Heaviside(-t),(T/4,3*T/4)\n",
        "x3 = sym.Heaviside(t),(3*T/4,T)\n",
        "y1 = x1\n",
        "y2 = x2\n",
        "y3 = x3\n",
        "x5 = np.concatenate((x1,x2,x3))\n",
        "y = np.concatenate((y1,y2,x3))\n",
        "P = integrate((x**2), (t, 0, T)) /T\n",
        "import numpy as np\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n",
        "\n",
        "l = np.linspace(-10, 10)\n",
        "\n",
        "y = np.piecewise((0 ˂= x and x ˂T/4, 1, T/4 ˂= x and x˂ 10,-1, 3.14 ˂ x and x˂ 10,1))\n",
        "plot(mi_fun, x=0..12):\n",
        "\n",
        "plt.plot(l, y)\n",
        "\n",
        "plt.grid()\n",
        "\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 468
        },
        "id": "mNZpMjVHEBzA",
        "outputId": "ca162118-a253-4a3a-af55-611dd43bff7f"
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<__array_function__ internals>:180: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ejercicio 2.2 del primer parcial 2023"
      ],
      "metadata": {
        "id": "C_DYvQ208nxy"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        },
        "id": "HlcLpuTS8lVe",
        "outputId": "418eaef7-170d-4ceb-f404-3692caee5f58"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-21-2285599c7072>\"\u001b[0;36m, line \u001b[0;32m14\u001b[0m\n\u001b[0;31m    T_o = 1/ # periodo función sin\u001b[0m\n\u001b[0m             ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
          ]
        }
      ],
      "source": [
        "#primeramente vamos a desarrollar la discretización paso por paso, empezando por nuestro cero y pendiente el cual tiene como puntos rmin=-5 y rmax=5\n",
        "def my_ceropen(x,ymin = -5, ymax = 5): #en general se pueden definir valores por defecto\n",
        "  '''\n",
        "  Codigo base para simular proceso de cero y pendiente\n",
        "  Se ingresa arreglo de numpy y los valores min  y max despues de cero y pendiente\n",
        "  '''\n",
        "  xmax = max(x) # x.max()\n",
        "  xmin = min(x) # x.min()\n",
        "  m = (ymax - ymin)/(xmax - xmin)\n",
        "  c = ymin - m*xmin\n",
        "  yv = m*x + c\n",
        "  return yv\n",
        "K = 1000 # número de muestras\n",
        "T_o = 1/ # periodo función sin\n",
        "A = 120 # amplitud\n",
        "ti = 0 #tiempo inicial\n",
        "tf = 2*T_o #tiempo final\n",
        "tv = np.linspace(ti,tf,num=K) #vector de datos en tiempo\n",
        "xv = A * np.sin(2*np.pi*tv/T_o) #vector de amplitud\n",
        "\n",
        "plt.plot(tv,xv)\n",
        "plt.xlabel('tiempo [s]')\n",
        "plt.ylabel('$A\\sin[\\omega t_k]$')\n",
        "plt.show()\n",
        "tv = np.linspace(ti,tf,num=K)\n",
        "Se= 2*np.sin(5*np.pi*60*tv)\n",
        "cerop= my_ceropen(Se,-5,5)"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "RQvMXhT7JEpM"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}